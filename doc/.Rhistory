name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
pathname<-"../figs/Plotfigures"
ggsave(plot=last_plot(), device="jpeg", filename=paste("Category", name,".jpeg", sep=""), path=pathname, dpi=196 )}}
catfunc(categoryi)
sudo apt install libcairo2-dev libjpeg9-dev
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
pathname<-"../figs/Plotfigures/"
ggsave(plot=last_plot(), device="jpeg", filename=paste("Category", name,".jpeg", sep=""), path=pathname, dpi=196 )}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
pathname<-"../figs/Plotfigures/"
ggsave(plot=last_plot(), device="jpeg", filename=paste("Category", name,".jpeg", sep=""), path=pathname, dpi=72)}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
pathname<-"../figs/Plotfigures/"
ggsave(plot=last_plot(), device="jpeg", filename=paste("Category", name,".jpeg", sep=""), path=pathname, dpi=50)}}
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), device="jpeg", filename=paste("Category", name,".jpeg", sep=""), path="../figs/Plotfigures/", dpi=50)}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), device="jpeg", filename=paste("Category", name,".jpeg", sep=""), path="../figs", dpi=50)}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), device="jpeg", filename=paste("Category", name,".jpeg", sep=""), path="../figs", dpi=50)
dev.off()}}
catfunc(categoryi)
dev.off()
graphics.off()
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
dev.off()
ggsave(plot=last_plot(), device="jpeg", filename=paste("Category", name,".jpeg", sep=""), path="../figs", dpi=50)
}}
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
dev.off()
ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""), path="../figs", dpi=50)
}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))+
xlab("Chronological index of President")
#ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
catfunc(categoryi)
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
#ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
#ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
xlab("Chronological index of Presidents")+
ylab("% frequency of word in inaugural address"))
#ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
catfunc(categoryi)
dtmss.in.all<- removeSparseTerms(dtm.in.all, 0.35)
d <- dist(t(dtmss.in.all), method="euclidian")
fit <- hclust(d=d, method="ward")
plot(fit, hang=-1)
groups<- cutree(fit, k=6)
rect.hclust(fit, k=6, border="red")
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "Polit.")
catfunc(categoryiv)
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "Polit")
catfunc(categoryiv)
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "Polit@")
catfunc(categoryiv)
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "Polit[[:punct:]]")
catfunc(categoryiv)
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "POLIT")
catfunc(categoryiv)
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "Polit")
catfunc(categoryiv)
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "Polit. ")
catfunc(categoryiv)
wordvecii<- c("legislature", "house", "senate", "court", "constitution")
plot.yearterm(wordvecii)
wordveciid<- c("duty", "citizen", "virtuous", "republic", "people", "democracy")
plot.yearterm(wordveciid)
wordveciiex<- c("United States", "America")
plot.yearterm(wordveciiex)
wordveciiex<- c("United States", "America")
plot.yearterm(wordveciiex)
wordveciiex<- c("America")
plot.yearterm(wordveciiex)
wordveciiex<- c("united states", "america")
plot.yearterm(wordveciiex)
wordveciiex<- c("united states")
plot.yearterm(wordveciiex)
wordveciiex<- c("unitedstates")
plot.yearterm(wordveciiex)
wordveciiex<- c("America")
plot.yearterm(wordveciiex)
wordveciiex<- c("America")
wordveciiex<- c("america")
plot.yearterm(wordveciiex)
?plot
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
xlab("Chronological index of Presidents")+
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""), path="../figs/")
}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
xlab("Chronological index of Presidents")+
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
catfunc(categoryi)
catfunc(categoryii)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
xlab("Chronological index of Presidents")+
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), filename=paste("Category", name,".png", sep=""), path="../output/")
}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
xlab("Chronological index of Presidents")+
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), filename=paste("Category", name,".png", sep=""), path="../output")
}}
catfunc(categoryi)
p
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tidytext", "topicmodels", "cluster", "ggplot2", "tidyr", "sp", "jpeg")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
library(xlsx)
library(topicmodels)
library(cluster)
library(tidyr)
library(ggplot2)
library(sp)
library(jpeg)
print(R.version)
getwd()
folder.path="../data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
inaug.info=read.xlsx("../data/InaugurationInfo.xlsx", sheetIndex = 1)
inaug.dates=read.delim("../data/InaugurationDates.txt", comment.char="#")
in.all<-Corpus(DirSource(folder.path))
in.all<-tm_map(in.all, stripWhitespace)
in.all<-tm_map(in.all, content_transformer(tolower))
in.all<-tm_map(in.all, removeWords, stopwords("english"))
in.all<-tm_map(in.all, removeWords, character(0))
in.all<-tm_map(in.all, removePunctuation)
in.all <- tm_map(in.all, removeNumbers)
folder.path="../data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
setwd("~/Desktop/Spr2017-Proj1-jt2929")
folder.path="../data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
setwd("~/Desktop/Spr2017-Proj1-jt2929/doc")
folder.path="../data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
inaug.info=read.xlsx("../data/InaugurationInfo.xlsx", sheetIndex = 1)
inaug.dates=read.delim("../data/InaugurationDates.txt", comment.char="#")
in.all<-Corpus(DirSource(folder.path))
in.all<-tm_map(in.all, stripWhitespace)
in.all<-tm_map(in.all, content_transformer(tolower))
in.all<-tm_map(in.all, removeWords, stopwords("english"))
in.all<-tm_map(in.all, removeWords, character(0))
in.all<-tm_map(in.all, removePunctuation)
in.all <- tm_map(in.all, removeNumbers)
dtm.in.all<-DocumentTermMatrix(in.all)
dtms.in.all<-removeSparseTerms(dtm.in.all, 0.5)
freqs.inall<- colSums(as.matrix(dtms.in.all))
ords<-order(freqs.inall)
wf<- data.frame(word=names(freqs.inall), freq=freqs.inall)
#Plot words that appear at least 150 times
p <- ggplot(subset(wf, freq>150), aes(word, freq))
p <- p + geom_bar(stat="identity")
p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
p
#Further remove sparse terms
dtmss.in.all<- removeSparseTerms(dtm.in.all, 0.35)
d <- dist(t(dtmss.in.all), method="euclidian")
fit <- hclust(d=d, method="ward")
plot(fit, hang=-1)
groups<- cutree(fit, k=6)
rect.hclust(fit, k=6, border="red")
#Arrange speeches by time
inaug.info$merge<-paste(inaug.info$File,"-", inaug.info$Term, sep="")
speeches.time<-speeches[match(inaug.info$merge, prex.out)]
indexdoc<- as.data.frame(speeches.time)
indexdoc$index<- c(1:58)
dtm.ind <- DocumentTermMatrix(in.all,
control = list(weighting =
function(x)
weightTfIdf(x, normalize =
FALSE),
stopwords = TRUE))
dtm.ind.tdy=tidy(dtm.ind)
dtm.in.all.tdy=tidy(dtm.in.all)
index<- match(dtm.in.all.tdy$document, indexdoc$speeches.time)
dtm.in.all.tdy.t=cbind(dtm.in.all.tdy, index)
year_term_counts <- dtm.in.all.tdy.t %>%
complete(index, term, fill = list(count = 0)) %>%
group_by(index) %>%
mutate(year_total = sum(count))
plot.yearterm<- function(wordvec) {
year_term_counts %>%
filter(term %in% wordvec) %>%
ggplot(aes(index, count / year_total)) +
geom_point() +
geom_smooth() +
facet_wrap(~ term, scales = "free_y") +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address")
}
wordvec1<- c("free", "freedom", "peace", "great", "citizens")
plot.yearterm(wordvec1)
wordvec2<-c("constitution", "government", "must", "now", "shall", "will", "time")
plot.yearterm(wordvec2)
wordvec3<- c("nation", "power", "world", "great")
plot.yearterm(wordvec3)
#Load word categories database from inquirer
words<- read.csv("../data/inquirerbasic.csv")
year_total= rep(NA, 58)
for (i in 1:58) {
year_total[i]=as.numeric((year_term_counts[year_term_counts$index==i, 5][1,1]))}
#Create function "dfsfunc" that filters out individual dataframe from each category containing all the relevant words from the GI database, with input argument a vector "cat" that contains the names of the interested categories
dfsfunc<- function(cat) {
listofdfs<-list()
for (i in 1:length(cat)){
colno<-which(colnames(words)==cat[i])
dat<- filter(words, words[, colno]==cat[i])
datword<-tolower(dat[,1])
dat<-filter(year_term_counts, term %in% datword)
finaldat<- dat %>% group_by(index) %>% summarize(count=sum(count))
finaldat$year_total<- year_total
listofdfs[[i]]<-finaldat}
return(listofdfs)}
#Create function "catfunc" that takes in a character vector "cat" and generates ggplots of % sum frequency of words under the category in inaugural address against index of Presidents
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
xlab("Chronological index of Presidents")+
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
categoryi<- c("Relig","TimeSpc", "NatrPro", "ABS", "Perceiv")
library(shiny)
ui<- fluidPage (
titlePanel("Concrete to Abstract"),
sidebarLayout(
sidebarPanel("Word Categories",
selectInput('element_id', label='Select one option', choices=categoryi)),
mainPanel("% total frequency of all words in category in inaugural speech over time",
p(textOutput('dynamicText')),
plotOutput('countcat', height = "450px"))))
server= function(input, output) {
output$dynamicText <- renderText({
sprintf('You selected %s', input$element_id)
})
output$countcat <- renderPlot(height = 450, {
catfunc(input$element_id)
})}
shinyApp(ui=ui, server=server)
library(shiny)
ui<- fluidPage (
titlePanel("Concrete to Abstract"),
sidebarLayout(
sidebarPanel("Word Categories",
selectInput('element_id', label='Select one option', choices=categoryi)),
mainPanel("% total frequency of all words in category in inaugural speech over time",
p(textOutput('dynamicText')),
plotOutput('countcat', height = "450px"))))
server= function(input, output) {
output$dynamicText <- renderText({
sprintf('You selected %s', input$element_id)
})
output$countcat <- renderPlot(height = 450, {
catfunc(input$element_id)
})}
shinyApp(ui=ui, server=server)
categoryii<- c("PowAuth", "Legal", "Intrj", "Know", "Causal")
ui<- fluidPage (
titlePanel("Formal to Colloquail"),
sidebarLayout(
sidebarPanel("Word Categories",
selectInput('element_id', label='Select one option', choices=categoryii)),
mainPanel("% total frequency of all words in category in inaugural speech over time",
p(textOutput('dynamicText')),
plotOutput('countcat', height = "450px"))))
server= function(input, output) {
output$dynamicText <- renderText({
sprintf('You selected %s', input$element_id)
})
output$countcat <- renderPlot(height = 450, {
catfunc(input$element_id)
})}
shinyApp(ui=ui, server=server)
categoryiii<- c("If", "Submit", "Begin", "Goal", "PowCoop")
ui<- fluidPage (
titlePanel("Passive to Active"),
sidebarLayout(
sidebarPanel("Categories",
selectInput('element_id', label='Select one option', choices=categoryiii)),
mainPanel("% frequency of sum of words in speech over time",
p(textOutput('dynamicText')),
plotOutput('countcat', height = "450px"))))
server= function(input, output) {
output$dynamicText <- renderText({
sprintf('You selected %s', input$element_id)
})
output$countcat <- renderPlot(height = 450, {
catfunc(input$element_id)
})}
shinyApp(ui=ui, server=server)
categoryiv<- c("Nonadlt", "AffTot", "WlbTot", "WlbPt", "AffPt")
ui<- fluidPage (
titlePanel("Republican to Democratic"),
sidebarLayout(
sidebarPanel("Categories",
selectInput('element_id', label='Select one option', choices=categoryiv)),
mainPanel("% frequency of sum of words in speech over time",
p(textOutput('dynamicText')),
plotOutput('countcat', height = "450px"))))
server= function(input, output) {
output$dynamicText <- renderText({
sprintf('You selected %s', input$element_id)
})
output$countcat <- renderPlot(height = 450, {
catfunc(input$element_id)
})}
shinyApp(ui=ui, server=server)
wordveciic<- c("legislature", "senate", "constitution")
plot.yearterm(wordveciic)
wordveciid<- c("duty",  "virtuous", "republic", "democracy")
plot.yearterm(wordveciid)
wordveciiex<- c("america")
plot.yearterm(wordveciiex)
